-- Initialize blockchain bridge database
-- This script creates the necessary tables and indexes

-- Create blockchain_tx table for transaction receipts
CREATE TABLE IF NOT EXISTS blockchain_tx (
    tx_id VARCHAR(255) PRIMARY KEY,
    op_type VARCHAR(50) NOT NULL,
    target_id VARCHAR(255) NOT NULL,
    submitted_at TIMESTAMP NOT NULL DEFAULT NOW(),
    confirmed_at TIMESTAMP,
    raw_response JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_blockchain_tx_target_id ON blockchain_tx(target_id);
CREATE INDEX IF NOT EXISTS idx_blockchain_tx_op_type ON blockchain_tx(op_type);
CREATE INDEX IF NOT EXISTS idx_blockchain_tx_submitted_at ON blockchain_tx(submitted_at);
CREATE INDEX IF NOT EXISTS idx_blockchain_tx_confirmed_at ON blockchain_tx(confirmed_at);
CREATE INDEX IF NOT EXISTS idx_blockchain_tx_status ON blockchain_tx(confirmed_at) WHERE confirmed_at IS NULL;

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
DROP TRIGGER IF EXISTS update_blockchain_tx_updated_at ON blockchain_tx;
CREATE TRIGGER update_blockchain_tx_updated_at
    BEFORE UPDATE ON blockchain_tx
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create view for transaction statistics
CREATE OR REPLACE VIEW tx_statistics AS
SELECT 
    op_type,
    COUNT(*) as total_transactions,
    COUNT(confirmed_at) as confirmed_transactions,
    COUNT(*) - COUNT(confirmed_at) as pending_transactions,
    AVG(EXTRACT(EPOCH FROM (confirmed_at - submitted_at))) as avg_confirmation_time_seconds,
    MIN(submitted_at) as first_transaction,
    MAX(submitted_at) as latest_transaction
FROM blockchain_tx
GROUP BY op_type;

-- Create view for recent activity
CREATE OR REPLACE VIEW recent_activity AS
SELECT 
    tx_id,
    op_type,
    target_id,
    submitted_at,
    confirmed_at,
    CASE 
        WHEN confirmed_at IS NOT NULL THEN 'confirmed'
        ELSE 'pending'
    END as status,
    EXTRACT(EPOCH FROM (COALESCE(confirmed_at, NOW()) - submitted_at)) as processing_time_seconds
FROM blockchain_tx
ORDER BY submitted_at DESC
LIMIT 100;

-- Insert sample data for development (only in development mode)
-- This will be controlled by environment variables in the application

-- Grant permissions (adjust based on your user setup)
-- GRANT ALL PRIVILEGES ON TABLE blockchain_tx TO blockchain_bridge_user;
-- GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO blockchain_bridge_user;

-- Add comments for documentation
COMMENT ON TABLE blockchain_tx IS 'Transaction receipts for blockchain operations';
COMMENT ON COLUMN blockchain_tx.tx_id IS 'Unique transaction identifier generated by the service';
COMMENT ON COLUMN blockchain_tx.op_type IS 'Type of operation: issue_did, record_incident, anchor_evidence, append_audit';
COMMENT ON COLUMN blockchain_tx.target_id IS 'Target entity ID (DID, incident ID, etc.)';
COMMENT ON COLUMN blockchain_tx.submitted_at IS 'When the transaction was submitted to blockchain';
COMMENT ON COLUMN blockchain_tx.confirmed_at IS 'When the transaction was confirmed on blockchain';
COMMENT ON COLUMN blockchain_tx.raw_response IS 'Raw response from Fabric gateway/SDK';

-- Create function to clean up old records (optional maintenance)
CREATE OR REPLACE FUNCTION cleanup_old_transactions(older_than_days INTEGER DEFAULT 90)
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM blockchain_tx 
    WHERE submitted_at < NOW() - INTERVAL '1 day' * older_than_days
    AND confirmed_at IS NOT NULL;
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

COMMENT ON FUNCTION cleanup_old_transactions IS 'Clean up old confirmed transactions older than specified days';

-- Create function to get transaction statistics
CREATE OR REPLACE FUNCTION get_tx_stats(start_date DATE DEFAULT NULL, end_date DATE DEFAULT NULL)
RETURNS TABLE (
    operation_type VARCHAR(50),
    total_count BIGINT,
    confirmed_count BIGINT,
    pending_count BIGINT,
    success_rate NUMERIC,
    avg_confirmation_time_minutes NUMERIC
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        op_type::VARCHAR(50),
        COUNT(*)::BIGINT as total_count,
        COUNT(confirmed_at)::BIGINT as confirmed_count,
        (COUNT(*) - COUNT(confirmed_at))::BIGINT as pending_count,
        ROUND((COUNT(confirmed_at)::NUMERIC / COUNT(*)::NUMERIC) * 100, 2) as success_rate,
        ROUND(AVG(EXTRACT(EPOCH FROM (confirmed_at - submitted_at)) / 60.0), 2) as avg_confirmation_time_minutes
    FROM blockchain_tx
    WHERE (start_date IS NULL OR submitted_at >= start_date)
    AND (end_date IS NULL OR submitted_at <= end_date + INTERVAL '1 day')
    GROUP BY op_type
    ORDER BY total_count DESC;
END;
$$ LANGUAGE plpgsql;

COMMENT ON FUNCTION get_tx_stats IS 'Get transaction statistics for a date range';

-- Display setup completion message
DO $$
BEGIN
    RAISE NOTICE 'Blockchain Bridge database initialization completed successfully!';
    RAISE NOTICE 'Tables created: blockchain_tx';
    RAISE NOTICE 'Views created: tx_statistics, recent_activity';
    RAISE NOTICE 'Functions created: cleanup_old_transactions, get_tx_stats';
END $$;